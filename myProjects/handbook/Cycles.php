<!DOCTYPE html>
<html lang="ru">
  <head>
    <meta charset="utf-8">
    <title>Циклы</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <header>
      <p class="page-title">Циклы</p>
      <nav class="blog-navigation">
        <a href="index.html">На главную</a>
      </nav>
    </header>
      <article>
        <h1>Циклы</h1>
        <p>До текущего момента, всё, что вы писали в PHP и все примеры, что вы смотрели, выполняются от первой до последней строчки, одна за одной. Сценарий состоит из инструкций, которые выполняются последовательно и без повторений. Но если добавить внутрь цикл и поместить в него какую-то часть кода, то данный фрагмент кода может быть выполнен больше одного раза.</p>
        <p class="rule"><em><b>Цикл</b></em> — конструкция языка, которая выполняет заданный блок кода более одного раза.</p>
        <h2>Цикл while</h2>
        <img src="picture/loopwhile.png" alt="циклы" width="800">
        <p class="signature">Рисунок 1. Синтаксис цикла while</p>
        <p>Циклы бывают разных типов, но в этой главе мы рассмотрим два. Первым идёт цикл&nbsp <span class="codeLine"> &nbsp  while &nbsp </span>. Выглядит он так: есть ключевое слово &nbsp <span class="codeLine"> &nbsp  while &nbsp </span> &nbsp и есть условие цикла, а также его тело. Условие цикла заключается в круглые скобки. Внутри этих скобок находятся выражения (вспоминаем первую главу), логическое выражение, которое возвращает true или false. Если это выражение вернуло true, то цикл выполнит то, что находится в его теле. Тело цикла будет выполняться, если выражение в его условии вернуло истину.</p>
        <h2>Свойства циклов</h2>
        <ul>
            <li>Состоят из тела и условия;</li>
            <li>Должны выполняться конечное число раз;</li>
            <li>Каждое выполнение цикла называется «итерация»;</li>
            <li>Можно прервать выполнение досрочно;</li>
            <li>Могут быть вложенными;</li>
            <li>Часто используются в коде, особенно при работе с массивами.</li>
        </ul>
        <h3>Пример цикла while</h3>
        <pre><code>
            &lt;?php
                $last_num = 1;
                
                while ($last_num &lt; 10) {
                    print($last_num);
                    $last_num = $last_num + 1;
            }
        </code></pre>                
        <p>Покажем с помощью цикла цифры от 1 до 9. Для этого нам понадобится сам цикл, выражение, его тело и код, который будет отвечать за увеличение счётчика и одновременно за то, чтобы цикл рано или поздно закончил своё выполнение.</p>
        <p>Имеется начальное значение счётчика. Мы его поместили в переменную. Затем у нас есть выражение, то есть условие цикла. Оно очень простое. То, что находится в переменной должно быть меньше 10. Если 1 &lt; 10, то цикл выполнится. Также имеется тело цикла, которое состоит из двух строк. Первая просто показывает на экране очередное значение переменной. А вторая строчка увеличивает значение переменной на единицу.</p>
        <p>И когда этот блок кода выполнится в первый раз, на экране будет выведено 1, второе выполнение покажет цифру 2. И когда переменная дойдёт до 10, условие станет ложным и цикл остановится.</p>
        <h3>Практика работы с циклом: пагинация</h3>
        <p>Задача Написать цикл, который выведет список страниц для постраничной навигации</p>
        <img src="picture/loop_practics.png" alt="массив" width="700">
        <p class="signature">Рисунок 2. Цикл для организации пагинации</p>
        <p>Пагинация — это список ссылок от 1 до общего количества страниц, и этот список надо отрисовать в виде HTML-кода. Вручную мы делать это не будем, а задействуем цикл.</p>        
        <pre><code>
            &lt;?php
                $pages_count = 3; // количество страниц
                $cur_page = 1; // номер текущей страницы
            ?>

            &lt;ul class="pagination">
                &lt;?php while ($cur_page &lt;= $pages_count): ?>
                &lt;li class="item">
                    &lt;a href="/?page=&lt;?=$cur_page;?>">&lt;?=$cur_page;?>&lt;/a>
                &lt;/li>
                &lt;?php $cur_page++; ?>
                &lt;?php endwhile; ?>
            &lt;/ul>
        </code></pre>        
        <p>Мы хотим нарисовать три ссылки и тогда условия будут следующими: номер текущей страницы, номер последней страницы, условие, что текущая страница меньше или равна общему количеству страниц.  Тело цикла рисует в каждой итерации очередной элемент списка.</p>
        <p>Как и в случае с условиями, работая с вёрсткой, мы можем использовать альтернативный синтаксис. В этом случае вместо фигурных скобок будет двоеточие и ключевое слово endwhile. Всё, что между двоеточием и &nbsp <span class="codeLine"> &nbsp  endwhile &nbsp</span>&nbsp будет выведено, пока будет выполняться условие.</p>
        <h3>Практика работы с циклом: заполнение списка</h3>
        <pre><code>
            &lt;?php
                $year_cur = 1920; // начальный год
                $year_end = 2015;  // последний год
            ?>

            &lt;select name="year">
                &lt;?php while ($year_cur &lt;= $year_end): ?>
                &lt;option value="&lt;?=$year_cur;?>">&lt;?=$year_cur;?>&lt;/option>
                &lt;?php $year_cur++; ?>
                &lt;?php endwhile; ?>
            &lt;/select>
        </code></pre>                
        <p>Здесь мы используем цикл для заполнения выпадающего списка выбора года рождения. Вы наверняка видели такие в формах регистрации, где надо выбрать год рождения. В таком списке может быть и 100 элементов и все эти элементы должны присутствовать в HTML-коде, чтобы этот список работал в браузере. Но мы не будем это делать руками, ведь для этого существуют циклы.</p>
        <p>В качестве условия будет первый год и последний год. Тело цикла занимается показом очередного элемента списка с подстановкой соответствующих значений и увеличением счётчика. Таким простым и лаконичным способом мы отрисуем список из 95 элементов.</p>
        <h2>Циклы для перечисления массивов</h2>
        <p>Массив — это  «перечисляемый» тип данных. Значения массива могут быть последовательно перебраны циклом.</p>
        <p>Вы уже изучили циклы и массивы. Обе эти части синтаксиса часто используются вместе, так как массив  — это комплексный тип данных, состоящий из отдельных значений и зачастую бывает необходимо вывести все элементы из одного массива. Но просто показать массив посредством функции &nbsp <span class="codeLine"> &nbsp  print &nbsp </span> &nbsp мы не можем — массив требует полного обхода. Обойти массив можно с помощью цикла.</p>        
        <p>Мы обходим массив по элементам от первого до последнего и с каждым из элементов что-то делаем. Например, выводим его на экран.</p>
        <img src="picture/car.png" alt="массив" width="700">
        <p class="signature">Рисунок 3. Обход массива циклом как обход вагона проводником</p>
        <p>Когда цикл обходит массив, то он это делает начиная от элемента с первой позиции, до элемента с последней позиции. Если мы работаем с простым массивом, то цикл начнёт работу с элемента с индексом 0 и продолжит на каждой итерации обращаться к следующему элементу, как проводник обходит купе вагона.</p>
        <h3>Практика обхода массива циклом</h3>
        <p>Вернёмся к первому примеру. У нас есть список категорий в левом меню. Этот список находится в массиве, но мы не разбирались, как элементы массива становится элементами этого меню, то есть как тот массив, который был определён в PHP-коде, стал этим списком элементов меню.</p>
        <p>Список в HTML-коде выглядит вот так:</p>
        <pre><code>
            &lt;nav class="navigation__links">
              &lt;a href="/category?id=4">Видеоигры&lt;/a>
              &lt;a href="/category?id=2">Животные&lt;/a>
              &lt;a href="/category?id=8">Люди&lt;/a>
              &lt;a href="/category?id=6">Наука&lt;/a>
              &lt;a href="/category?id=5">Приколы&lt;/a>
              &lt;a href="/category?id=3">Спорт&lt;/a>
              &lt;a href="/category?id=7">Фейлы&lt;/a>
              &lt;a href="/category?id=1">Фильмы и анимация&lt;/a>
            &lt;/nav>
        </code></pre>
        <p>Мы должны взять массив и добавить его обход циклом &nbsp <span class="codeLine"> &nbsp while &nbsp </span>.</p>
        <pre><code>
            &lt;?php $cats = ["Видеоигры", "Животные", "Люди", "Наука", "Приколы", "Спорт", "Фейлы", "Фильмы"];  ?>
            &lt;nav class="navigation__links">
            &lt;?php
            $index = 0;
            $num = count($cats);
            while ($index < $num): ?>
                &lt;a href="#">&lt;?=$cats[$index];?>&lt;/a>
                &lt;?php $index++; ?>
            &lt;?php endwhile; ?>
        </code></pre>        
        <p>Индекс, который изначально равен 0, должен быть меньше, чем общее число элементов, полученное с использованием функции &nbsp <span class="codeLine"> &nbsp count &nbsp </span>, и пока это значение меньше, мы выводим на экран очередную ссылку. И таким нехитрым образом получается красивый вывод.</p>
        <h2>Цикл foreach</h2>
        <p class="rule"><em><b>foreach</b></em> — специальный вид цикла, который необходим только для перебора массивов</p>
        <p>В чём неудобство цикла  &nbsp <span class="codeLine"> &nbsp  while &nbsp </span> &nbsp ? Вернёмся к прошлому примеру. Решаемая здесь задача проста: у нас есть массив, мы хотим его обойти и с каждым элементом что-то сделать. Но для реализации необходимо написать много лишних строчек кода. Сначала мы узнаём индекс первого элемента, общее количество элементов, сравниваем их в выражении и не забываем внутри самой итерации следить за тем, чтобы это выражение стало ложью, когда мы обойдём весь массив. То есть приходится писать слишком много логики для такого простого действия, как обход массива.</p>
        <p>К счастью, разработчики языка позаботились об этом. Существует ещё один цикл, который называется &nbsp <span class="codeLine"> &nbsp  foreach &nbsp </span> &nbsp  . Этот цикл предназначен специально для обхода массивов, а так как он создан для единственной цели, использовать его просто и удобно.</p>
        <h3>Синтаксис цикла foreach</h3>
        <img src="picture/foreach.png" alt="массив" width="800">
        <p class="signature">Рисунок 4. Цикл foreach</p>
        <p> &nbsp <span class="codeLine"> &nbsp  foreach &nbsp </span> &nbsp отличается от цикла &nbsp <span class="codeLine"> &nbsp  while &nbsp </span> &nbsp тем, что у него нет условия. У него нет выражения, которое должно быть истиной. Вместо этого в круглых скобках указывается сам массив, потом ключевое слово &nbsp <span class="codeLine"> &nbsp as &nbsp </span> &nbsp , и потом возможны варианты: либо просто переменная &nbsp <span class="codeLine"> &nbsp  $value &nbsp </span> &nbsp , либо две переменных &nbsp <span class="codeLine"> &nbsp  $key => $value &nbsp </span> &nbsp , разделённых стрелкой. Далее идет тело цикла.</p>
        <p>Цикл &nbsp <span class="codeLine"> &nbsp foreach &nbsp </span> &nbsp сам заботится, чтобы весь массив был обойдён. Больше не надо думать о выражениях, чтобы они были истиной. Теперь за это отвечает &nbsp <span class="codeLine"> &nbsp foreach &nbsp </span> &nbsp , а нам достаточно указать переменную, в которой будет содержаться значение очередного элемента массива на очередной итерации. То есть в переменной значение будет обновляться на каждой новой итерации цикла.</p>
        <h3>Преимущества foreach:</h3>
        <ul>
            <li>создан специально для обхода массивов;</li>
            <li>требует писать гораздо меньше кода;</li>
            <li>позволяет обращаться к ключам элементов.</li>
        </ul> 
        <p class="rule">На каждой итерации цикла в переменных &nbsp <em><b>$key</b></em> и <em><b>$val</b></em> &nbsp будут значения следующего элемента массива</p>               
        <p>Если использовать только переменную &nbsp <span class="codeLine"> &nbsp $value &nbsp </span> &nbsp (название может быть любым), то в этой переменной на каждой итерации будет очередное значение. Если использовать две переменных, то в переменной &nbsp <span class="codeLine"> &nbsp $key &nbsp </span> &nbsp , которая указана первой, будет ключ или индекс массива, а в &nbsp <span class="codeLine"> &nbsp $value &nbsp </span> &nbsp — значение.</p>
        <h3>Практика работы с foreach</h3>
        <pre><code>
            &lt;ul class="gif-list">
            &lt;?php foreach ($gifs as $key => $val): ?>
            &lt;li class="gif">
                &lt;div class="gif__picture">
                    &lt;a href="/gif/view?id=&lt;?=$val['id']; ?>" class="gif__preview">&lt;img src="
                    &lt;?=$val['gif']; ?>">&lt;/a>
                &lt;/div>
                &lt;div class="gif__desctiption">
                    &lt;h3 class="gif__desctiption-title">&lt;a href="/gif/view?id=&lt;?=$val['id'];?>">
                    &lt;?=$val['title'];?>&lt;/a>&lt;/h3>
                &lt;/div>
                &lt;div class="gif__description-data">
                    &lt;span class="gif__username">&lt;?=$val['author'];?>&lt;/span>
                    &lt;span class="gif__likes">&lt;?=$val['likes_count'];?>&lt;/span>
                &lt;/div>
            &lt;/li>
            &lt;?php endforeach; ?>
            &lt;/ul>
        </code></pre>        
        <p>Возьмём цикл &nbsp <span class="codeLine"> &nbsp foreach &nbsp </span> &nbsp и применим его для показа гифок в вёрстке. Здесь как и с циклом &nbsp <span class="codeLine"> &nbsp while &nbsp </span> &nbsp есть альтернативная конструкция без фигурных скобок. Всё, что внутри &nbsp <span class="codeLine"> &nbsp foreach &nbsp </span> &nbsp и &nbsp <span class="codeLine"> &nbsp endforeach &nbsp </span> &nbsp будет выведено на каждой итерации цикла.</p>
        <p>Если в цикле &nbsp <span class="codeLine"> &nbsp foreach &nbsp </span> &nbsp будем обходить список гифок, то на каждый элемент массива будет отрисован элемент &nbsp <span class="codeLine"> &nbsp li &nbsp </span> &nbsp , а внутри будут подставляться значения из переменной &nbsp <span class="codeLine"> &nbsp $val &nbsp </span> &nbsp , где будет находиться очередной ассоциативный массив из этого списка. У него есть ключи, и используя их, мы показываем список гифок.</p>

        
        <p></p>
        <p></p>
        <p></p>
        <p></p>
        <p></p>
        <p></p>
        <p></p>
        <p></p>
        <p></p>
        <p></p>
        <p></p>
        <p></p>
        <p></p>
        <p></p>
                
        
        
        
        
        
        
        
        
        
        
      </article>
    <footer>
      <nav class="blog-navigation">
        <a href="index.html">На главную</a>
      </nav>
    </footer>
  </body>
</html>

